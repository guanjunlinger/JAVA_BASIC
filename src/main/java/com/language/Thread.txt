private final Object blockerLock = new Object(); 保护blocker对象的锁
private volatile Interruptible blocker;          NIO中断处理程序

volatile Object parkBlocker; 线程等待的锁对象

private volatile int threadStatus = 0; 线程状态

private Runnable target    线程需要执行的任务

private ClassLoader contextClassLoader;  线程关联的类加载器

private volatile UncaughtExceptionHandler uncaughtExceptionHandler   线程终止的异常处理器

private static volatile UncaughtExceptionHandler defaultUncaughtExceptionHandler  线程终止共享的异常处理器

ThreadLocal.ThreadLocalMap threadLocals = null             线程本地Map

ThreadLocal.ThreadLocalMap inheritableThreadLocals = null; 父线程继承的Map

@sun.misc.Contended("tlr")
long threadLocalRandomSeed;   ThreadLocalRandom类当前的种子

@sun.misc.Contended("tlr")
int threadLocalRandomProbe;   Probe hash value

@sun.misc.Contended("tlr")
int threadLocalRandomSecondarySeed; ThreadLocalRandom辅助种子

实质调用本地方法
public static void sleep(long millis, int nanos)
     public static native void sleep(long millis) throws InterruptedException

 设置中断标记,触发中断处理程序
 public void interrupt()

 轮训线程状态,只要线程存活,就一直调用wait等待线程终止
 public final synchronized void join(long millis)
           public final native void wait(long timeout) throws InterruptedException;

 检测线程持有锁对象
 public static native boolean holdsLock(Object obj);









